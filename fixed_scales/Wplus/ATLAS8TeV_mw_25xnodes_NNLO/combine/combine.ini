[Paths]
raw_dir = ..
out_dir = ./combined


[Observables]
ALL

#> rebin an observable
# observable > observable_rebin : [x0, x1, x2, ... xN]


[Parts]
LO : LO
R : R
V  : V
VV : VV
RV : RV
RRa : RRa
RRb : RRb


[Final]
LO        = LO
NLO       = LO + V + R
NNLO      = LO + V + R + VV + RV + RRa + RRb
#LO_NNLO    = LO + VV + RV + RRa + RRb
#NNLO_VV   = LO + V + R + VV
#NNLO_RRa   = LO + V + R + RRa
#NNLO_RRb   = LO + V + R + RRb
#NNLO_RV = LO + V + R + RV
NLO_only  = V + R
NNLO_only = VV + RV + RRa + RRb
R          = R
V	       = V
RRa	       = RRa
RRb	       = RRb
RV	       = RV
VV	       = VV
[Options]
#> search the directory structure recursive for data files
recursive = True

#> output weight tables: for APPLfast
weights = True

#> restrict merge to only certain columns: e.g. drop channel breakdown for performance
#columns = ['tot_scale01', 'tot_scale02', 'tot_scale03', 'tot_scale04', 'tot_scale05', 'tot_scale06', 'tot_scale07']


# options:
# trim = (threshold, max_frac)
# threshold: Threshold above which data points are trimmed away.  Larger values means less trimming (default = 4).
# max_frac:   Dynamically  increase  threshold  until  the  ratio  of  trimmed  data  is below this value (default = 0.1, can also be ‘None’).
#trim = (4, 0.1)

#trim = (3.0, 0.4)

#> k-scan = (maxdev_unwgt, nsteps, maxdev_steps)
#> maxdev_unwgt:  If this variable is not ‘None’ we first produce a reference result using an unweighted average and perform a successive
#  k-merging until the result of the k-merging lies within maxdev_unwgt × σ unwgt of the unweighted reference
#  (default = None ).
#
#> nsteps, maxdev_steps:   In  the k-merging,  we  successively  combine  pairs  of pseudo-runs.
#  This means that at each step the number of pseudo-runs decreases by a factor of 1/2 at each step.
#  If nsteps, maxdev_steps are not *None*, we keep track of the previous nsteps results and check for their consistency and therefore
#  look  for  a  plateau.   More  precisely,  we  check  that  the  previous nsteps results are  within maxdev_steps × σ current
#  of  the  current  result  of  the  k-merging.   We therefore need at least nsteps+1 steps to be able to check for this termination
#  condition (default = 2,0.5).

#k-scan = (None, 3, 0.5)

#> After we have combined individual runs into pseudo-runs, such that we actually trust the error estimates, we perform a weighted average over them.

#weighted = True


